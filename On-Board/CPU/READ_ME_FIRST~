Since we're moving to compiling stuff I'm making a standard-source-code type structure for the files.

That is, source code files will be in /src/, built binaries will be in /bin/, headers will be in /include/, static libraries will be in /lib/. For now, we need to complete only the /src folder, and I suggest we make a working 'model' of the rover in C, (that is, make objects, like the Wheel class I have included) to which we can assign values and get values from. Once this is done, that is, once we're able to completely characterize the rover based on the data that is assigned to the rover class in the code, we can move to transmission of data to the base station, complete that first before actually going for any actuation, so that we get the structure right. Till here, we must have the capability to use make to compile the project, since every time you change a file it isn't possible to individually compile all related and dependent files again.

Once that is done we can start porting the rest of the code to C++, which won't take much time because we already have the code  written.

In short: now focus on completing the parts folder in src, learn to compile the project nicely, test if you can give it values and get values from it. I propose today at least this much must be done (functions likhe nahi toh chalega):

Rover Class
	Rover Parameters (other than those which come under the underneath)
	Wheel Class
	Joints Class
	Arm Class
	Servo Class (Feedback!)
	CameraMount Class (Which will depend on the Servo class, obviously)
	SerialDevice Class (GPS, XBee, Arduino!)
	I2CDevice Class
	Whatever else you can think of - electrical or mechanical from which we would get data and to which we would give data.


INSERT A BRIEF DESCRIPTION AT THE START OF ALL FILES. DO NOT DESCRIBE THE API FUNCTIONS, IT JUST CLUTTERS THE DESCRIPTION. EXPLAIN ON A HIGH LEVEL.

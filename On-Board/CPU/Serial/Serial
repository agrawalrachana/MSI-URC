#!/usr/bin/python

# Serial port functions. This script will search for an Arduino serial port between /dev/ttyACM0 and /dev/ttyACM$(MAX_SERIAL_PORTS) before
# giving up. It will then write the configuration to a Bash file, which is sourced by the Main script to get the values of SERIAL_PORT and
# SERIAL_IS_OPEN. Now that the serial port is open, the script continuously gets data from the Arduino. When data is requested by the Main
# Script via a signal, the signal handler produces a Bash script that can be sourced by the Main function upon a feedback signal which is
# generated after the creation of the file is complete.

from serial import *
import os
import sys
import signal


SerialPort=Serial()
SerialPort.baudrate=int(os.environ['SERIAL_BAUDRATE'])

PortNo=0

for i in range(int(os.environ['MAX_SERIAL_PORTS'])+1):
	try:
		SerialPort.port=os.environ['SERIAL_PREFIX']+str(i)
		SerialPort.open()
		PortNo=i
		break
	except SerialException:
		pass


SerialInitFile=open(os.environ['SERIAL_INIT_FILE'],"w+")

SerialInitFile.write('#!/bin/bash\n')
SerialInitFile.write('export SERIAL_PORT="'+os.environ['SERIAL_PREFIX']+str(PortNo)+'"\n')
SerialInitFile.write('export SERIAL_IS_OPEN=1\n')

SerialInitFile.close()


def CreateScript(signum, frame):
	InputData=""
	if SerialPort.inWaiting() > 0:
		InputData=SerialPort.read(int(os.environ['DATA_LENGTH']))
		SerialPort.flushInput()
	SerialDataFile=open(os.environ['SERIAL_DATA_FILE'],"w+")
	SerialDataFile.write("#!/bin/bash\n")
	SerialDataFile.write("export SERIAL_DATA_RECEIVED='"+InputData+"'")
	SerialDataFile.close()
	os.kill(int(os.environ['BASH_PID']),int(os.environ['SERIAL_SCRIPT_READY_SIGNAL']))
	

def SendData(signum, frame):
	DataFile=open(os.environ['SERIAL_SEND_FILE'],"r+")
	SendData=DataFile.readline().strip()
	SerialPort.write(SendData)
	DataFile.close()
	
def Close(signum, frame):
	SerialPort.close()
	sys.exit(0)

signal.signal(signal.SIGRTMIN+int(os.environ['MAIN_WANTS_DATA_SIGNAL']), CreateScript)
signal.signal(signal.SIGRTMIN+int(os.environ['MAIN_HAS_DATA_SIGNAL']), SendData)
signal.signal(signal.SIGTERM, Close)

while 1:
	pass
